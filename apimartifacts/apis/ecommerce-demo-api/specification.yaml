openapi: 3.0.1
info:
  title: Ecommerce Demo API
  version: '1.0'
servers:
  - url: https://apimlab3-leaf.com/econ
paths:
  '/stocks/{code}':
    get:
      tags:
        - stock-controller
      summary: Get stock product
      description: Get stock product
      operationId: getStock
      parameters:
        - name: code
          in: path
          description: Format - int32.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StockResponseDTO'
              examples:
                default:
                  value: 
    put:
      tags:
        - stock-controller
      summary: Update stock product
      description: Update stock product
      operationId: updateStock
      parameters:
        - name: code
          in: path
          description: Format - int32.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                description:
                  type: string
                category:
                  enum:
                    - '1'
                    - '2'
                    - '3'
                    - '4'
                    - '5'
                    - '6'
                    - '7'
                    - '8'
                    - '9'
                    - '10'
                  type: integer
                  format: int32
                price:
                  type: number
                  format: double
                quantity:
                  type: integer
                  format: int32
                status:
                  enum:
                    - active
                    - inactive
                    - out_of_stock
                    - deleted
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StockResponseDTO'
              examples:
                default:
                  value: 
    delete:
      tags:
        - stock-controller
      summary: Delete stock product
      description: Delete stock product
      operationId: deleteStock
      parameters:
        - name: code
          in: path
          description: Format - int32.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
              examples:
                default:
                  value: 
  /users/login:
    post:
      tags:
        - user-controller
      summary: Login user
      description: Login user
      operationId: login
      parameters:
        - name: role
          in: query
          description: Role of user
          schema:
            enum:
              - client
              - employee
            type: string
          example: client
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
            example:
              email: john@example.com
              password: ok
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponseDTO'
              examples:
                default:
                  value: 
  /users/employees/signup:
    post:
      tags:
        - user-controller
      summary: Signup new employee
      description: Signup new employee
      operationId: signupEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeSignupRequestDTO'
            example:
              name: Felipe
              surnames: Contreras
              email: felipe@example.com
              password: ok
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
              examples:
                default:
                  value: 
  /users/clients/signup:
    post:
      tags:
        - user-controller
      summary: Signup new client
      description: Signup new client
      operationId: signupClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientSignupRequestDTO'
            example:
              name: Carlos
              surnames: Cruz
              direction: Av. Principal 123
              state: Jalisco
              postal_code: '45000'
              phone: '3300000000'
              email: carlos@example.com
              password: ok
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
              examples:
                default:
                  value: 
  /stocks:
    get:
      tags:
        - stock-controller
      summary: List products
      description: List products
      operationId: getAllStocks
      parameters:
        - name: searchPhrase
          in: query
          schema:
            type: string
        - name: page
          in: query
          description: Format - int32.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Format - int32.
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockResponseDTO'
              examples:
                default:
                  value: 
    post:
      tags:
        - stock-controller
      summary: Add stock product
      description: Add stock product
      operationId: createStock
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                description:
                  type: string
                category:
                  enum:
                    - '1'
                    - '2'
                    - '3'
                    - '4'
                    - '5'
                    - '6'
                    - '7'
                    - '8'
                    - '9'
                    - '10'
                  type: integer
                  format: int32
                price:
                  type: number
                  format: double
                quantity:
                  type: integer
                  format: int32
                status:
                  enum:
                    - active
                    - inactive
                    - out_of_stock
                    - deleted
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StockResponseDTO'
              examples:
                default:
                  value: 
  /carts:
    get:
      tags:
        - shopping-cart-controller
      summary: List cart products
      description: List cart products
      operationId: getShoppingCart
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ShoppingCartResultResponseDTO'
              examples:
                default:
                  value: 
    post:
      tags:
        - shopping-cart-controller
      summary: Add cart product
      description: Add cart product
      operationId: addCartProduct
      parameters:
        - name: productCode
          in: query
          description: Format - int32.
          required: true
          schema:
            type: integer
            format: int32
        - name: quantity
          in: query
          description: Format - int32.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ShoppingCart'
              examples:
                default:
                  value: 
  /carts/buy:
    post:
      tags:
        - shopping-cart-controller
      summary: Buy cart
      description: Buy cart
      operationId: buyCart
      parameters:
        - name: payment_method
          in: query
          description: Payment Method
          required: true
          schema:
            enum:
              - CASH
              - VISA
              - MASTERCARD
              - PAYPAL
            type: string
          example: CASH
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                default:
                  value: 
  '/stocks/{code}/image':
    get:
      tags:
        - stock-controller
      summary: Return picture
      description: Return picture
      operationId: getImage
      parameters:
        - name: code
          in: path
          description: Format - int32.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: array
                items:
                  type: string
                  format: byte
              examples:
                default:
                  value: 
  /orders:
    get:
      tags:
        - order-controller
      summary: List orders
      description: List orders
      operationId: listOrders
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              examples:
                default:
                  value: 
  '/orders/{orderId}/details':
    get:
      tags:
        - order-controller
      summary: List orders
      description: List orders
      operationId: orderDetails
      parameters:
        - name: orderId
          in: path
          description: Format - int32.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderResultResponseDTO'
              examples:
                default:
                  value: 
  /lookup/categories:
    get:
      tags:
        - lookup-controller
      summary: List categories
      description: List categories
      operationId: getCategories
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
              examples:
                default:
                  value: 
  '/carts/{cartId}':
    delete:
      tags:
        - shopping-cart-controller
      summary: Delete cart product
      description: Delete cart product
      operationId: deleteStockFromCart
      parameters:
        - name: cartId
          in: path
          description: Format - int32.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int32
        category:
          type: string
        description:
          type: string
    StockResponseDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
        description:
          type: string
        quantity:
          type: integer
          format: int32
        price:
          type: number
          format: double
        category:
          $ref: '#/components/schemas/Category'
        status:
          type: string
        created_by:
          type: integer
          format: int32
        updated_by:
          type: integer
          format: int32
    LoginRequestDTO:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: john@example.com
        password:
          type: string
          example: ok
      description: Login Request DTO
    LoginResponseDTO:
      type: object
      properties:
        email:
          type: string
        token:
          type: string
        type:
          type: string
    EmployeeSignupRequestDTO:
      required:
        - email
        - name
        - password
        - surnames
      type: object
      properties:
        name:
          type: string
          example: Felipe
        surnames:
          type: string
          example: Contreras
        email:
          type: string
          example: felipe@example.com
        password:
          type: string
          example: ok
      description: Signup Client Request DTO
    ClientSignupRequestDTO:
      required:
        - direction
        - email
        - name
        - password
        - phone
        - postal_code
        - state
        - surnames
      type: object
      properties:
        name:
          type: string
          example: Carlos
        surnames:
          type: string
          example: Cruz
        direction:
          type: string
          example: Av. Principal 123
        state:
          type: string
          example: Jalisco
        postal_code:
          type: string
          example: '45000'
        phone:
          type: string
          example: '3300000000'
        email:
          type: string
          example: carlos@example.com
        password:
          type: string
          example: ok
      description: Signup Client Request DTO
    ShoppingCart:
      type: object
      properties:
        id:
          type: integer
          format: int32
        productCode:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        clientId:
          type: integer
          format: int32
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int32
        clientId:
          type: integer
          format: int32
        paymentMethod:
          type: string
        createdAt:
          type: string
          format: date-time
    OrderResultResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        paymentMethod:
          type: string
        total:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductOrderDTO'
    ProductOrderDTO:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
        price:
          type: number
          format: double
        stock:
          $ref: '#/components/schemas/Stock'
    Stock:
      type: object
      properties:
        code:
          type: integer
          format: int32
        description:
          type: string
        categoryId:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        price:
          type: number
          format: double
        status:
          type: string
        createdBy:
          type: integer
          format: int32
        updatedBy:
          type: integer
          format: int32
    ShoppingCartResultResponseDTO:
      type: object
      properties:
        clientId:
          type: integer
          format: int32
        total:
          type: number
          format: double
        products:
          type: object
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      name: Ocp-Apim-Subscription-Key
      in: header
    apiKeyQuery:
      type: apiKey
      name: subscription-key
      in: query
security:
  - apiKeyHeader: [ ]
  - apiKeyQuery: [ ]